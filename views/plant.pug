extends layout

block content
  h1 Plant Monitoring Application
  section.container__plants--details
    h2= plant.name
    span Created at: #{plant.createdDate.toString().substring(0, 34)}
    span Last Watering: #{plant.lastWatering.toString().substring(0, 34)}
    span Location: #{plant.indoor ? "Indoor" : "Outdoor"}
    span Condition: #{plant.condition.toFixed(2)}%
    span Status: #{plant.status}
    a(href=`/plants/${plant.initialPhoto}`) View Initial Photo
    form(class="form__water--form", action=`/plants/water/${plant.id}`, method="post", enctype="multipart/form-data")
      h3 Photo after watering:
      input(type="file", id="formPhotoWater", name="photoWater")
      img(src="", id="imgPlantPhoto")
      span(id="imgPlantIndicator")
      input(type="text", id="formPlantColor", name="color", value="")
      input.plants__list--water(type="submit", value="Water!")
  section.plants__history
    h2 Watering History
    table
      tr
        td Date
        td Color
        td Condition
        td Type
        td Photo
      each h in history
        tr
          td 
            h3= h.date.toString().substring(0,34)
          td 
            span(style=`display: block; background-color: ${h.color}; width: 100%; height: 30px;`)
          td 
            span #{(100-h.delta).toFixed(2)}%
          td
            span Manual
          td
            a(href=`/plants/${h.plantPhoto}`) View Photo
    h2 Graph
    canvas#chartHistory
  script(src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0")
  script.
    const getRGB = str =>
      str
        .replace(/(^rgba\()/g, "")
        .replace(/,1\)$/g, "")
        .split(",")
        .map(s => Number(s));

    function componentToHex(c) {
      var hex = c.toString(16);
      return hex.length == 1 ? "0" + hex : hex;
    }

    function rgbToHex(r, g, b) {
      return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b);
    }

    fetch(window.location.href + '/water').then(data => {
      const ctx = document.getElementById("chartHistory").getContext("2d");
      data.json().then(history => {
          const gradientStroke = ctx.createLinearGradient(0, 0, window.innerWidth, 0);
          const colorsData = history.map(({ color }) => rgbToHex(...getRGB(color))).reverse()
          colorsData.forEach((color, index) => {
            gradientStroke.addColorStop(index/(colorsData.length-1), color);
          })
          const myChart = new Chart(ctx, {
            type: "line",
            data: {
              labels: history.map(({ date }) => date.substring(0,10)).reverse(),
              datasets: [
                {
                  label: "Condition",
                  borderColor: gradientStroke,
                  pointBorderColor: gradientStroke,
                  pointBackgroundColor: gradientStroke,
                  pointHoverBackgroundColor: gradientStroke,
                  pointHoverBorderColor: gradientStroke,
                  pointBorderWidth: 10,
                  pointHoverRadius: 10,
                  pointHoverBorderWidth: 1,
                  pointRadius: 3,
                  fill: false,
                  borderWidth: 4,
                  data: history.map(({ delta }) => 100-delta).reverse(),
                },
              ],
            },
            options: {
              legend: {
                position: "bottom",
              },
              scales: {
                yAxes: [
                  {
                    ticks: {
                      fontColor: "rgba(0,0,0,0.5)",
                      fontStyle: "bold",
                      beginAtZero: true,
                      maxTicksLimit: 5,
                      padding: 20,
                    },
                    gridLines: {
                      drawTicks: false,
                      display: false,
                    },
                  },
                ],
                xAxes: [
                  {
                    gridLines: {
                      zeroLineColor: "transparent",
                    },
                    ticks: {
                      padding: 20,
                      fontColor: "rgba(0,0,0,0.5)",
                      fontStyle: "bold",
                    },
                  },
                ],
              },
            },
          });
        })
      })

  
